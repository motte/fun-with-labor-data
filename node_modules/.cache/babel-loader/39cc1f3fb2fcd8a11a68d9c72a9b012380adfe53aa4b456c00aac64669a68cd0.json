{"ast":null,"code":"var _jsxFileName = \"/Users/michael/Projects/fun-with-labor-data/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport USAMap from \"react-usa-map\";\nimport axios from 'axios';\nimport * as XLSX from 'xlsx';\nimport ReactHTMLParser from 'react-html-parser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleFetchFromUrl = async () => {\n      this.setState({\n        currentStateData: 'Loading labor data, please wait at least one minute.'\n      });\n      const url = '/state_M2023_dl.xlsx';\n      try {\n        const response = await axios.get(url, {\n          responseType: 'arraybuffer'\n        });\n        const data = new Uint8Array(response.data);\n        const workbook = XLSX.read(data, {\n          type: 'array'\n        });\n        const sheetName = workbook.SheetNames[0];\n        const sheet = workbook.Sheets[sheetName];\n        const jsonData = XLSX.utils.sheet_to_json(sheet, {\n          header: 32\n        });\n        this.setState({\n          laborJSONData: jsonData\n        });\n        this.setState({\n          currentStateData: 'Select a state.'\n        });\n      } catch (error) {\n        console.error('Error fetching or parsing Excel file:', error);\n        this.setState({\n          currentStateData: 'error'\n        });\n      }\n    };\n    this.mapHandler = event => {\n      let stateName = event.target.querySelector('title').innerHTML;\n      let currentStateData = this.state.laborJSONData.filter(i => i.AREA_TITLE === stateName);\n      let newStateData = '<';\n      for (let i = 0; i < currentStateData.length; i++) {\n        newStateData += '<tr><td><</tr>';\n      }\n      this.setState({\n        currentStateData: JSON.stringify(currentStateData)\n      });\n    };\n    this.statesFill = () => {\n      return {\n        \"CA\": {\n          fill: \"rgba(0,0,155,0.8)\",\n          clickHandler: () => alert(\"Custom callback for this US state.\")\n        }\n      };\n    };\n    this.state = {\n      currentStateData: 'Select a state',\n      laborJSONData: []\n    };\n  }\n  componentDidMount() {\n    this.handleFetchFromUrl();\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"header\",\n        children: \"Mike's US Labor Data Visualization\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Accessible to color blind people.  Easily extensible to other, similar datasets that could be loaded by the user.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(USAMap, {\n        defaultFill: \"rgba(250,255,250,0.8)\",\n        customize: this.statesFill(),\n        onClick: this.mapHandler,\n        onMouseOver: this.mapHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"state-data\",\n        children: this.state.currentStateData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","USAMap","axios","XLSX","ReactHTMLParser","jsxDEV","_jsxDEV","App","constructor","props","handleFetchFromUrl","setState","currentStateData","url","response","get","responseType","data","Uint8Array","workbook","read","type","sheetName","SheetNames","sheet","Sheets","jsonData","utils","sheet_to_json","header","laborJSONData","error","console","mapHandler","event","stateName","target","querySelector","innerHTML","state","filter","i","AREA_TITLE","newStateData","length","JSON","stringify","statesFill","fill","clickHandler","alert","componentDidMount","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","defaultFill","customize","onClick","onMouseOver"],"sources":["/Users/michael/Projects/fun-with-labor-data/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport USAMap from \"react-usa-map\";\nimport axios from 'axios';\nimport * as XLSX from 'xlsx';\nimport ReactHTMLParser from 'react-html-parser';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {currentStateData: 'Select a state', laborJSONData: []}\n  }\n\n  componentDidMount() {\n    this.handleFetchFromUrl();\n  }\n\n  handleFetchFromUrl = async () => {\n    this.setState({currentStateData: 'Loading labor data, please wait at least one minute.'});\n    const url = '/state_M2023_dl.xlsx';\n    \n    try {\n      const response = await axios.get(url, { responseType: 'arraybuffer' });\n\n      const data = new Uint8Array(response.data);\n      const workbook = XLSX.read(data, { type: 'array' });\n      const sheetName = workbook.SheetNames[0];\n      const sheet = workbook.Sheets[sheetName];\n      const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 32 });\n      this.setState({laborJSONData: jsonData});\n      this.setState({currentStateData: 'Select a state.'});\n    } catch (error) {\n      console.error('Error fetching or parsing Excel file:', error);\n      this.setState({currentStateData: 'error'});\n    }\n  };\n\n  mapHandler = (event) => {\n    let stateName = event.target.querySelector('title').innerHTML;\n    let currentStateData = this.state.laborJSONData.filter(i => i.AREA_TITLE === stateName);\n    let newStateData = '<';\n    for (let i=0; i<currentStateData.length; i++) {\n      newStateData += '<tr><td><</tr>'\n    }\n    this.setState({currentStateData: JSON.stringify(currentStateData)});\n  };\n\n  statesFill = () => {\n    return {\n      \"CA\": {\n        fill: \"rgba(0,0,155,0.8)\",\n        clickHandler: () => alert(\"Custom callback for this US state.\")\n      }\n    };\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"header\">Mike's US Labor Data Visualization</h1>\n        <h3>Accessible to color blind people.  Easily extensible to other, similar datasets that could be loaded by the user.</h3>\n        <USAMap defaultFill={\"rgba(250,255,250,0.8)\"} customize={this.statesFill()} onClick={this.mapHandler} onMouseOver={this.mapHandler} />\n        <table className=\"state-data\">{this.state.currentStateData}</table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}