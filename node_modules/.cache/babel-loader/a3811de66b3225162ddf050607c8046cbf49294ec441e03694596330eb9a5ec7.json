{"ast":null,"code":"var _jsxFileName = \"/Users/michael/Projects/fun-with-labor-data/src/components/StateInfo.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport * as XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ExcelReader() {\n  _s();\n  const [excelData, setExcelData] = useState(null);\n  const handleFileRead = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = event => {\n      const data = new Uint8Array(event.target.result);\n      const workbook = XLSX.read(data, {\n        type: 'array'\n      });\n      const sheetName = workbook.SheetNames[0];\n      const sheet = workbook.Sheets[sheetName];\n      const jsonData = XLSX.utils.sheet_to_json(sheet, {\n        header: 1\n      });\n      setExcelData(jsonData);\n    };\n    reader.readAsArrayBuffer(file);\n  };\n  const handleFetchFromUrl = async (url = '/state_M2023_dl.xlsx') => {\n    try {\n      const response = await axios.get(url, {\n        responseType: 'arraybuffer'\n      });\n      const data = new Uint8Array(response.data);\n      const workbook = XLSX.read(data, {\n        type: 'array'\n      });\n      const sheetName = workbook.SheetNames[0];\n      const sheet = workbook.Sheets[sheetName];\n      const jsonData = XLSX.utils.sheet_to_json(sheet, {\n        header: 1\n      });\n      setExcelData(jsonData);\n    } catch (error) {\n      console.error('Error fetching or parsing Excel file:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileRead\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFetchFromUrl,\n      children: \"Fetch from URL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), excelData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Excel Data:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(excelData, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(ExcelReader, \"0UFmZMzUys8nNxomEAeIxt+Lq2M=\");\n_c = ExcelReader;\nexport default ExcelReader;\nvar _c;\n$RefreshReg$(_c, \"ExcelReader\");","map":{"version":3,"names":["React","useState","axios","XLSX","jsxDEV","_jsxDEV","ExcelReader","_s","excelData","setExcelData","handleFileRead","e","file","target","files","reader","FileReader","onload","event","data","Uint8Array","result","workbook","read","type","sheetName","SheetNames","sheet","Sheets","jsonData","utils","sheet_to_json","header","readAsArrayBuffer","handleFetchFromUrl","url","response","get","responseType","error","console","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/michael/Projects/fun-with-labor-data/src/components/StateInfo.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport * as XLSX from 'xlsx';\n\nfunction ExcelReader() {\n  const [excelData, setExcelData] = useState(null);\n\n  const handleFileRead = (e) => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = (event) => {\n      const data = new Uint8Array(event.target.result);\n      const workbook = XLSX.read(data, { type: 'array' });\n      const sheetName = workbook.SheetNames[0];\n      const sheet = workbook.Sheets[sheetName];\n      const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 });\n\n      setExcelData(jsonData);\n    };\n\n    reader.readAsArrayBuffer(file);\n  };\n\n  const handleFetchFromUrl = async (url='/state_M2023_dl.xlsx') => {\n    try {\n      const response = await axios.get(url, { responseType: 'arraybuffer' });\n\n      const data = new Uint8Array(response.data);\n      const workbook = XLSX.read(data, { type: 'array' });\n      const sheetName = workbook.SheetNames[0];\n      const sheet = workbook.Sheets[sheetName];\n      const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 });\n\n      setExcelData(jsonData);\n    } catch (error) {\n      console.error('Error fetching or parsing Excel file:', error);\n    }\n  };\n\n  return (\n    <div>\n      <input type=\"file\" onChange={handleFileRead} />\n      <button onClick={handleFetchFromUrl}>Fetch from URL</button>\n\n      {excelData && (\n        <div>\n          <h3>Excel Data:</h3>\n          <pre>{JSON.stringify(excelData, null, 2)}</pre>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ExcelReader;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}